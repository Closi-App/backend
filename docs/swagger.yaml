basePath: /api/v1/
definitions:
  domain.Language:
    enum:
    - en
    - ru
    type: string
    x-enum-varnames:
    - EnglishLanguage
    - RussianLanguage
  domain.Location:
    properties:
      country:
        type: string
    type: object
  domain.Question:
    properties:
      attachments:
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/domain.Location'
      points:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  domain.Subscription:
    properties:
      expires_at:
        type: string
      type:
        $ref: '#/definitions/domain.SubscriptionType'
    type: object
  domain.SubscriptionType:
    enum:
    - free
    - monthly
    - annual
    type: string
    x-enum-varnames:
    - FreeSubscription
    - MonthlySubscription
    - AnnualSubscription
  domain.User:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      favorites:
        items:
          type: string
        type: array
      id:
        type: string
      is_confirmed:
        type: boolean
      name:
        type: string
      password:
        type: string
      points:
        type: integer
      referral_code:
        type: string
      settings:
        $ref: '#/definitions/domain.UserSettings'
      subscription:
        $ref: '#/definitions/domain.Subscription'
      updated_at:
        type: string
      username:
        type: string
    type: object
  domain.UserSettings:
    properties:
      email_notifications:
        type: boolean
      language:
        $ref: '#/definitions/domain.Language'
      location:
        $ref: '#/definitions/domain.Location'
    type: object
  v1.errorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  v1.questionCreateRequest:
    properties:
      attachments:
        items:
          type: string
        type: array
      description:
        type: string
      location:
        $ref: '#/definitions/domain.Location'
      points:
        type: integer
      title:
        type: string
    type: object
  v1.questionUpdateRequest:
    properties:
      attachments:
        items:
          type: string
        type: array
      description:
        type: string
      location:
        $ref: '#/definitions/domain.Location'
      points:
        type: integer
      title:
        type: string
    type: object
  v1.userRefreshRequest:
    properties:
      token:
        type: string
    type: object
  v1.userRefreshResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.userSignInRequest:
    properties:
      password:
        type: string
      username_or_email:
        type: string
    type: object
  v1.userSignInResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.userSignUpRequest:
    properties:
      email:
        type: string
      language:
        $ref: '#/definitions/domain.Language'
      location:
        $ref: '#/definitions/domain.Location'
      name:
        type: string
      password:
        type: string
      referrer_code:
        type: string
      username:
        type: string
    type: object
  v1.userSignUpResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  v1.userUpdateRequest:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      settings:
        $ref: '#/definitions/domain.UserSettings'
      username:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact: {}
  description: REST API for Closi App
  title: Closi API
  version: "1.0"
paths:
  /questions:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all questions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Question'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Get all questions
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: Create a new question
      parameters:
      - description: Request
        in: body
        name: questionCreateRequest
        required: true
        schema:
          $ref: '#/definitions/v1.questionCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Create question
      tags:
      - questions
  /questions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Delete question
      tags:
      - questions
    get:
      consumes:
      - application/json
      description: Retrieve a specific question by its ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Question'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Get question by ID
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update the details of a specific question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: string
      - description: Request
        in: body
        name: questionUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/v1.questionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Update question
      tags:
      - questions
  /users:
    delete:
      consumes:
      - application/json
      description: Delete the authenticated user's account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Delete current user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve the currently authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the authenticated user's information
      parameters:
      - description: Request
        in: body
        name: userUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/v1.userUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      security:
      - UserAuth: []
      summary: Update current user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Get user by ID
      tags:
      - users
  /users/refresh:
    post:
      consumes:
      - application/json
      description: Refresh the user's access and refresh tokens
      parameters:
      - description: Request
        in: body
        name: userRefreshRequest
        required: true
        schema:
          $ref: '#/definitions/v1.userRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.userRefreshResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Refresh tokens
      tags:
      - users
  /users/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate a user and retrieve tokens
      parameters:
      - description: Request
        in: body
        name: userSignInRequest
        required: true
        schema:
          $ref: '#/definitions/v1.userSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.userSignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Sign in
      tags:
      - users
  /users/sign-up:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Request
        in: body
        name: userSignUpRequest
        required: true
        schema:
          $ref: '#/definitions/v1.userSignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.userSignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/v1.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.errorResponse'
      summary: Sign up
      tags:
      - users
securityDefinitions:
  UserAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
