// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Closi-App/backend/internal/app"
	"github.com/Closi-App/backend/internal/delivery/http"
	"github.com/Closi-App/backend/internal/delivery/http/v1"
	"github.com/Closi-App/backend/internal/repository"
	"github.com/Closi-App/backend/internal/service"
	"github.com/Closi-App/backend/pkg/auth"
	"github.com/Closi-App/backend/pkg/database/mongo"
	"github.com/Closi-App/backend/pkg/logger"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, loggerLogger *logger.Logger) (*app.App, func(), error) {
	serviceService := service.NewService(loggerLogger)
	database := mongo.NewMongo(viperViper)
	repositoryRepository := repository.NewRepository(loggerLogger, database)
	userRepository := repository.NewUserRepository(repositoryRepository)
	passwordHasher := auth.NewPasswordHasher(viperViper)
	tokensManager := auth.NewTokensManager(viperViper)
	userService := service.NewUserService(serviceService, viperViper, userRepository, passwordHasher, tokensManager)
	questionRepository := repository.NewQuestionRepository(repositoryRepository)
	questionService := service.NewQuestionService(serviceService, questionRepository)
	handler := v1.NewHandler(loggerLogger, userService, questionService, tokensManager)
	server := http.NewServer(viperViper, loggerLogger, handler)
	appApp := newApp(viperViper, loggerLogger, server)
	return appApp, func() {
	}, nil
}

// wire.go:

var pkgSet = wire.NewSet(mongo.NewMongo, auth.NewTokensManager, auth.NewPasswordHasher)

var repositorySet = wire.NewSet(repository.NewRepository, repository.NewUserRepository, repository.NewQuestionRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService, service.NewQuestionService)

var deliverySet = wire.NewSet(v1.NewHandler, http.NewServer)

func newApp(cfg *viper.Viper, log *logger.Logger, httpServer *http.Server) *app.App {
	return app.NewApp(cfg, log, httpServer)
}
